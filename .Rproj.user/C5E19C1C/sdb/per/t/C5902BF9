{
    "collab_server" : "",
    "contents" : "#' Struture plot using ggplot2\n#'\n#' Make the traditional Structure plot of GoM model with ggplot2\n#'\n#' @param omega Cluster membership probabilities of each sample. Usually a\n#'              sample by cluster matrix in the Topic model output.\n#'              The cluster weights sum to 1 for each sample.\n#' @param annotation data.frame of two columns: sample_id and tissue_label.\n#'                  sample_id is a vetor consisting of character type of variable,\n#'                  which indicates the unique identifying number of each sample.\n#'                  tissue_label is a vector consisting of factor type of variable,\n#'                  which indicates the sample phenotype that is to be used in\n#'                  sorting and grouping the samples in the Structre plot; for example,\n#'                  tissue of origin in making Structure plot of the GTEx samples.\n#'                  Default is set to NULL for when no phenotype information is used to\n#'                  order the sample vectors.\n#' @param palette Colors assigned to label the clusters. The first color in the palette\n#'                  is assigned to the cluster that is labeled 1 (usually arbitrarily\n#'                  assigned during the clustering process). Note: The number of colors\n#'                  must be the same or greater than the number of clusters. When\n#'                  the number of clusters is greater than the number of colors,\n#'                  the clusters that are not assigned a color are filled with white\n#'                  in the figure. The recommended choice of color palette is RColorBrewer,\n#'                  for instance RColorBrewer::brewer.pal(8, \"Accent\") or\n#'                  RColorBrewwer::brewer.pal(9, \"Set1\").\n#' @param figure_title Title of the plot.\n#' @param yaxis_label Axis label for the phenotype used to order the samples,\n#'                    for example, tissue type or cell type.\n#' @param order_sample Whether to order the samples that are of the same tissue label\n#'                      or phenotype lable, that is, having the same label in the\n#'                      tissue_label variable. If TRUE, we order samples that are of\n#'                      the same phenotype label and sort the samples by membership\n#'                      of most representative cluster. If FALSE, we keep\n#'                      the order in the data.\n#' @param sample_order_decreasing If order_sample=TRUE, then order the sample in\n#'                  descending (TRUE) or ascending order.\n#' @param split_line Control parameters for the line that separates phenotype\n#'                  subgroups in the plot.\n#' @param axis_tick Control parameters for x-axis and y-axis tick sizes.\n#' @param plot_labels If TRUE, the plot the axis labels.\n#'\n#' @return Plots the Structure plot visualization of the GoM model\n#'\n#' @examples\n#' # Example 1\n#' data(\"MouseDeng2014.FitGoM\")\n#'\n#' # extract the omega matrix: membership weights of each cell\n#' names(MouseDeng2014.FitGoM$clust_6)\n#' omega <- MouseDeng2014.FitGoM$clust_6$omega\n#' tissue_label <- rownames(omega)\n#'\n#' # make annotation matrix\n#' annotation <- data.frame(\n#'   sample_id = paste0(\"X\", c(1:NROW(omega))),\n#'   tissue_label = factor(rownames(omega),\n#'\n#' # make annotation matrix\n#' annotation <- data.frame(\n#' sample_id = paste0(\"X\", c(1:NROW(omega))),\n#' tissue_label = factor(rownames(omega),\n#'                      levels = rev( c(\"zy\", \"early2cell\",\n#'                                      \"mid2cell\", \"late2cell\",\n#'                                      \"4cell\", \"8cell\", \"16cell\",\n#'                                      \"earlyblast\",\"midblast\",\n#'                                      \"lateblast\") ) ) )\n#' head(annotation)\n#'\n#' rownames(omega) <- annotation$sample_id;\n#' StructureGGplot(omega = omega,\n#'                  annotation = annotation,\n#'                  palette = RColorBrewer::brewer.pal(8, \"Accent\"),\n#'                  yaxis_label = \"development phase\",\n#'                  order_sample = TRUE,\n#'                  axis_tick = list(axis_ticks_length = .1,\n#'                                   axis_ticks_lwd_y = .1,\n#'                                   axis_ticks_lwd_x = .1,\n#'                                   axis_label_size = 7,\n#'                                   axis_label_face = \"bold\"))\n#'\n#' # Example 2\n#' # Import Deng et al data\n#'\n#' # function to read Deng data from GitHub\n#' read.data <- function() {\n#'   x <- tempfile()\n#'   download.file(paste0(\"https://cdn.rawgit.com/kkdey/\",\n#'                          \"singleCellRNASeqMouseDeng2014\",\n#'                          \"/master/data/Deng2014MouseEsc.rda\"),\n#'                 destfile = x, quiet = TRUE)\n#'   z <- get(load((x)))\n#'   return(z)\n#'   }\n#' Deng2014MouseESC <-read.data()\n#'\n#' deng.counts <- Biobase::exprs(Deng2014MouseESC)\n#' deng.meta_data <- Biobase::pData(Deng2014MouseESC)\n#' deng.gene_names <- rownames(deng.counts)\n#'\n#' samples_subvector <- which(!duplicated(deng.meta_data$cell_type))[1:3]\n#'\n#' # Fit GoM on 3 samples with K = 3\n#' fit_k3 <- FitGoM( t(deng.counts[,samples_subvector]),\n#'                   K = 3, tol=0.1)\n#'\n#' names(fit_k3$clust_3)\n#' omega <- fit_k3$clust_3$omega\n#'\n#' # make annotation matrix\n#' annotation <- data.frame(\n#'      sample_id = paste0(\"X\", c(1:NROW(omega))),\n#'      tissue_label = factor( as.character(deng.meta_data$cell_type[samples_subvector]),\n#'              levels = rev( as.character(deng.meta_data$cell_type[samples_subvector])  ) )\n#'      )\n#' rownames(omega) <- annotation$sample_id\n#' StructureGGplot(omega = omega,\n#'                  annotation = annotation,\n#'                  palette = RColorBrewer::brewer.pal(3, \"Accent\"),\n#'                  yaxis_label = \"development phase\",\n#'                  order_sample = TRUE,\n#'                  axis_tick = list(axis_ticks_length = .1,\n#'                                   axis_ticks_lwd_y = .1,\n#'                                   axis_ticks_lwd_x = .1,\n#'                                   axis_label_size = 7,\n#'                                   axis_label_face = \"bold\"))\n#'\n#' @import ggplot2\n#' @importFrom cowplot ggdraw panel_border plot_grid\n#' @import plyr\n#' @import reshape2\n#' @export\n\nStructureGGplot <- function(omega, annotation = NULL,\n                            palette = RColorBrewer::brewer.pal(8, \"Accent\"),\n                            figure_title = \"\",\n                            yaxis_label = \"Tissue type\",\n                            order_sample = TRUE,\n                            sample_order_decreasing = TRUE,\n                            split_line = list(split_lwd = 1,\n                                              split_col = \"white\"),\n                            plot_labels = TRUE,\n                            axis_tick = list(axis_ticks_length = .1,\n                                             axis_ticks_lwd_y = .1,\n                                             axis_ticks_lwd_x = .1,\n                                             axis_label_size = 3,\n                                             axis_label_face = \"bold\") ) {\n\n\n    # check if the number of colors is same as or more than the number of clusters\n    if (dim(omega)[2] > length(palette)) {\n        stop(\"Color choices is smaller than the number of clusters!\")\n    }\n\n    # check if rownames of omega are unique\n    if(length(unique(rownames(omega))) != NROW(omega)) {\n        stop(\"omega rownames are not unique!\")\n    }\n    # check the annotation data.frame\n    if (is.null(annotation)) null_annotation <- TRUE\n    if (!is.null(annotation)) null_annotation <- FALSE\n\n    if (null_annotation) {\n      annotation <- data.frame(\n                        sample_id = paste(\"X\", c(1:NROW(omega))),\n                        tissue_label = rep(\"NA\", NROW(omega)) )\n    } else if (!null_annotation) {\n      if (!is.data.frame(annotation))\n          stop(\"annotation must be a data.frame\")\n      if (!all.equal(colnames(annotation), c(\"sample_id\", \"tissue_label\")) ) {\n          stop(\"annotation data.frame column names must be sample_id and tissue_label\")\n      }\n      if ( length(unique(annotation$sample_id)) != NROW(omega)) {\n          stop(\"sample_id is not unique\")\n      }\n    }\n\n    df_ord <- do.call(rbind,\n                      lapply(1:nlevels(annotation$tissue_label), function(ii) {\n                          temp_label <- levels(annotation$tissue_label)[ii]\n                          temp_df <- omega[which(annotation$tissue_label == temp_label), ]\n                          is_single_sample <-\n                                  ( length(temp_df) == nlevels(annotation$tissue_label)|\n                                           is.null(dim(temp_df)) )\n                          # find the dominant cluster in each sample\n                          if ( is_single_sample ) {\n                              each_sample_order <- which.max(temp_df)\n                          } else {\n                              each_sample_order <- apply(temp_df, 1, which.max)\n                          }\n                          # find the dominant cluster across samples\n                          sample_order <- as.numeric(attr(table(each_sample_order), \"name\")[1])\n\n                          if (order_sample == TRUE & !is_single_sample) {\n                              # reorder the matrix\n                              temp_df_ord <- temp_df[order(temp_df[ , sample_order],\n                                               decreasing = sample_order_decreasing), ]\n                          } else {\n                              temp_df_ord <- temp_df\n                          }\n                          temp_df_ord\n                      }) )\n\n    df_mlt <- reshape2::melt(t(df_ord))\n    df_mlt <- plyr::rename(df_mlt, replace = c(\"Var1\" = \"topic\",\n                                               \"Var2\" = \"document\"))\n    df_mlt$document <- factor(df_mlt$document)\n    df_mlt$topic <- factor(df_mlt$topic)\n\n    # set blank background\n    ggplot2::theme_set(ggplot2::theme_bw(base_size = 12)) +\n        ggplot2::theme_update( panel.grid.minor.x = ggplot2::element_blank(),\n                               panel.grid.minor.y = ggplot2::element_blank(),\n                               panel.grid.major.x = ggplot2::element_blank(),\n                               panel.grid.major.y = ggplot2::element_blank() )\n\n    # inflat nubmers to avoid rounding errors\n    value_ifl <- 10000\n\n    # number of ticks for the weight axis, including 0 and 1\n    ticks_number <- 6\n\n    # set axis tick positions\n    tissue_count <- table(droplevels(annotation$tissue_label))\n    tissue_count_cumsum <- cumsum(table(droplevels(annotation$tissue_label)))\n    tissue_names <- levels(droplevels(annotation$tissue_label))\n\n    # if more than 2 levels in the phenotype of interest\n    if (length(tissue_names) > 1) {\n\n    tissue_breaks <- sapply(1:length(tissue_count), function(i) {\n        if (i == 1) {\n            if (tissue_count[i] == 1) bk <- 1\n            if (tissue_count[i] > 1)  bk <- (tissue_count_cumsum[i] - 0)/2\n            return(bk)\n        }\n        if (i > 1) {\n            if (tissue_count[i] == 1) bk_interval <- 1\n            if (tissue_count[i] > 1 ) {\n                bk_interval <- (tissue_count_cumsum[i] - tissue_count_cumsum[i-1])/2 }\n            bk <- tissue_count_cumsum[i-1] + bk_interval\n            return(bk)\n        }\n    })\n    names(tissue_breaks) <- tissue_names\n\n    # make ggplot\n    a <- ggplot2::ggplot(df_mlt,\n                         ggplot2::aes(x = df_mlt$document,\n                                      y = df_mlt$value*10000,\n                                      fill = factor(df_mlt$topic)) ) +\n        ggplot2::xlab(yaxis_label) + ggplot2::ylab(\"\") +\n        ggplot2::scale_fill_manual(values = palette) +\n        ggplot2::theme(legend.position = \"right\",\n                       legend.key.size = ggplot2::unit(.2, \"cm\"),\n                       legend.text = ggplot2::element_text(size = 5),\n                       ##<-- TBD: center legend title\n                       #              legend.title = element_text(hjust = 1),\n                       axis.text = ggplot2::element_text(size = axis_tick$axis_label_size,\n                                                         face = axis_tick$axis_label_face),\n                       axis.ticks.y = ggplot2::element_line(size = axis_tick$axis_ticks_lwd_y),\n                       axis.ticks.x = ggplot2::element_line(size = axis_tick$axis_ticks_lwd_x),\n                       axis.ticks.length = ggplot2::unit(axis_tick$axis_ticks_length, \"cm\"),\n                       title = ggplot2::element_text(size = 6) ) +\n        ggplot2::ggtitle(figure_title) +\n        ggplot2::scale_y_continuous( breaks = seq(0, value_ifl, length.out = ticks_number),\n                                     labels = seq(0, 1, 1/(ticks_number -1 ) ) ) +\n        # Add tissue axis labels\n        # ggplot2::scale_x_discrete(breaks = as.character(as.numeric(levels(df_mlt$document)[round(tissue_breaks)])),\n        #                           labels = names(tissue_breaks)) +\n        ggplot2::scale_x_discrete(breaks = as.character((levels(df_mlt$document)[round(tissue_breaks)])),\n                                  labels = names(tissue_breaks)) +\n        # Add legend title\n        ggplot2::labs(fill = \"Clusters\") +\n        ggplot2::coord_flip()\n\n\n    # width = 1: increase bar width and in turn remove space\n    # between bars\n    b <- a + ggplot2::geom_bar(stat = \"identity\",\n                               position = \"stack\",\n                               width = 1)\n    # sample labels option\n    if (plot_labels == TRUE) {\n        b\n    } else {\n        b <- b + theme(axis.text.y = element_blank())\n    }\n\n    # remove plot border\n    b <- b + cowplot::panel_border(remove = TRUE)\n\n    # Add demarcation\n    b <- b + ggplot2::geom_vline(\n        xintercept = cumsum(table(droplevels(annotation$tissue_label)))[\n            -length(table(droplevels(annotation$tissue_label)))] + .5,\n        col = split_line$split_col,\n        size = split_line$split_lwd)\n    b\n    } else if (null_annotation) {\n      # make ggplot\n      a <- ggplot2::ggplot(df_mlt,\n                           ggplot2::aes(x = df_mlt$document,\n                                        y = df_mlt$value*10000,\n                                        fill = factor(df_mlt$topic)) ) +\n        ggplot2::xlab(yaxis_label) + ggplot2::ylab(\"\") +\n        ggplot2::scale_fill_manual(values = palette) +\n        ggplot2::theme(legend.position = \"right\",\n                       legend.key.size = ggplot2::unit(.2, \"cm\"),\n                       legend.text = ggplot2::element_text(size = 5),\n                       ##<-- TBD: center legend title\n                       #              legend.title = element_text(hjust = 1),\n                       axis.text = ggplot2::element_text(size = axis_tick$axis_label_size,\n                                                         face = axis_tick$axis_label_face),\n                       axis.ticks.y = ggplot2::element_line(size = axis_tick$axis_ticks_lwd_y),\n                       axis.ticks.length = ggplot2::unit(axis_tick$axis_ticks_length, \"cm\"),\n                       title = ggplot2::element_text(size = 6) ) +\n        ggplot2::ggtitle(figure_title) +\n        ggplot2::scale_y_continuous( breaks = seq(0, value_ifl, length.out = ticks_number),\n                                     labels = seq(0, 1, 1/(ticks_number -1 ) ) ) +\n        ggplot2::scale_x_discrete(breaks = NULL) +\n        # Add legend title\n        ggplot2::labs(fill = \"Clusters\") +\n        ggplot2::coord_flip()\n\n      # width = 1: increase bar width and in turn remove space\n      # between bars\n      b <- a + ggplot2::geom_bar(stat = \"identity\",\n                                 position = \"stack\",\n                                 width = 1)\n      # sample labels option\n      if (plot_labels == TRUE) {\n        b\n      } else {\n        b <- b + theme(axis.text.y = element_blank())\n      }\n\n      # remove plot border\n      b <- b + cowplot::panel_border(remove = TRUE)\n\n      b\n\n    }\n}\n",
    "created" : 1478396752788.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1629696373",
    "id" : "C5902BF9",
    "lastKnownWriteTime" : 1478401302,
    "last_content_update" : 1478401302160,
    "path" : "~/Desktop/CountClust/R/StructureGGplot.R",
    "project_path" : "R/StructureGGplot.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}