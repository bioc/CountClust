{
    "collab_server" : "",
    "contents" : "#' @title Obtain Batch effect Corrected counts\n#'\n#' @description This function first converts counts data to log CPM data ,\n#'    then apply a linear model with the batch effect as a factor. We take\n#'    the sum of intercept, residuals and mean batch effect across all the\n#'    batches and then inverse transform it back to counts to get rid of\n#'    batch effects.\n#'\n#' @param data count matrix, with samples along the rows and features\n#'             along the columns.\n#' @param batch_lab batch label vector.\n#' @param use_parallel if TRUE, we do a parallel analysis over features,\n#'        else serial application.\n#'\n#' @return Returns a counts data. with same dimension as the input data,\n#'         but which is corrected for batch_lab.\n#'\n#' @keywords counts data, batch effect\n#'\n#' @examples\n#' # Simulation example\n#' N=500;\n#' K=4;\n#' G=100;\n#' Label.Batch=c(rep(1,N/4),rep(2,N/4),rep(3,N/4),rep(4,N/4));\n#' alpha_true=matrix(rnorm((K)*G,0.5,1),nrow=(K));\n#' library(gtools)\n#' tt <- 10;\n#' omega_true = matrix(rbind(rdirichlet(tt*10,c(3,4,2,6)),\n#'                          rdirichlet(tt*10,c(1,4,6,3)),\n#'                          rdirichlet(tt*10,c(4,1,2,2)),\n#'                          rdirichlet(tt*10,c(2,6,3,2)),\n#'                          rdirichlet(tt*10,c(3,3,5,4))), nrow=N);\n#' B=max(Label.Batch);\n#' sigmab_true=2;\n#' beta_true=matrix(0,B,G);\n#' for(g in 1:G)\n#' {\n#'     beta_true[,g]=rnorm(B,mean=0,sd=sigmab_true);\n#' }\n#' read_counts=matrix(0,N,G);\n#' for(n in 1:N){\n#'     for(g in 1:G)\n#'     {\n#'         read_counts[n,g]=rpois(1, omega_true[n,]%*%exp(alpha_true[,g]\n#'                                                       + beta_true[Label.Batch[n],g]));\n#'    }\n#'}\n#'\n#' batchcorrect_counts <- BatchCorrectedCounts(read_counts, Label.Batch,\n#'                                      use_parallel=FALSE)\n#' @importFrom gtools rdirichlet\n#' @importFrom  limma voom\n#' @importFrom parallel mclapply\n#' @importFrom stats lm\n#' @export\n#'\nBatchCorrectedCounts <- function(data, batch_lab, use_parallel = TRUE)\n{\n    trans_data <- voom2(data);\n    lib_size <- rowSums(data);\n    batch_lab <- as.factor(batch_lab)\n    if(use_parallel){\n        batch_removed_counts_mean <-\n            do.call(cbind,\n                    parallel::mclapply(1:dim(trans_data)[2], function(g)\n                    {\n                        out <- lm(trans_data[,g] ~  batch_lab,\n                                  contrasts =  list(batch_lab=\"contr.sum\"))\n                        return(round((2^{out$coefficients[1] + out$residuals - 6*log(10, base=2)})*(lib_size+1) - 0.5))\n                    }, mc.cores=parallel::detectCores()));\n    }\n\n    if(!use_parallel){\n        batch_removed_counts_mean <-\n            do.call(cbind, lapply(1:dim(trans_data)[2], function(g)\n            {\n                out <- lm(trans_data[,g] ~  batch_lab,\n                            contrasts =  list(batch_lab=\"contr.sum\"))\n                return(round((2^{out$coefficients[1] + out$residuals - 6*log(10, base=2)})*(lib_size+1) - 0.5))\n                #return(round(exp((out$coefficients[1] + out$residuals)/6)*(lib_size+1)-0.4));\n            }));\n    }\n\n    if (dim(batch_removed_counts_mean)[2]!=dim(data)[2])\n        stop(\"The batch corrected data is not of same dimension as the counts data : try changing use_parallel\")\n    batch_corrected_counts <- round(batch_removed_counts_mean);\n    rownames(batch_corrected_counts) = rownames(data);\n    colnames(batch_corrected_counts) = colnames(data);\n    return(batch_corrected_counts)\n}\n\nvoom2 <- function(counts){\n    libsize.mat <- rep.col(rowSums(counts), dim(counts)[2]);\n    voom.out <- log((counts+0.5), base=2) - log((libsize.mat+1), base=2)+ 6* log(10, base=2);\n    return(voom.out)\n}\nrep.row<-function(x,n){\n    matrix(rep(x,each=n),nrow=n)\n}\n\nrep.col<-function(x,n){\n    matrix(rep(x,each=n), ncol=n, byrow=TRUE)\n}\n",
    "created" : 1478400737443.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3186643682",
    "id" : "36809A08",
    "lastKnownWriteTime" : 1478400875,
    "last_content_update" : 1478400875407,
    "path" : "~/Desktop/CountClust/R/BatchCorrectedCounts.R",
    "project_path" : "R/BatchCorrectedCounts.R",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}