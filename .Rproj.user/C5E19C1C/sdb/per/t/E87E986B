{
    "collab_server" : "",
    "contents" : "#' @title compGoM: compare GoM model fits through log-likelihood, BIC and null loglikelihood\n#'\n#' @description This function takes the \\code{FitGoM} output model fits\n#'              and compute log likelihood, BIC and null model loglikelihood for the GoM models.\n#'\n#' @param data matrix on which GoM model is fitted (samples along rows, genes along columns)\n#' @param model_output \\code{FitGoM} output (a \\code{list}).\n#'\n#' @return compGoM_models a vector of GoM model fit BIC, loglikelihood and null model loglikelihood for each model in FiGoM model input.\n#'\n#' @keywords GoM, model fit\n#'\n#' @examples\n#'\n#' read.data <- function() {\n#'   x <- tempfile()\n#'   download.file(paste0(\"https://cdn.rawgit.com/kkdey/\",\n#'                          \"singleCellRNASeqMouseDeng2014\",\n#'                          \"/master/data/Deng2014MouseEsc.rda\"),\n#'                 destfile = x, quiet = TRUE)\n#'   z <- get(load((x)))\n#'   return(z)\n#'   }\n#' Deng2014MouseESC <-read.data()\n#'\n#' # Extract observed counts\n#' deng.counts <- Biobase::exprs(Deng2014MouseESC)\n#'\n#' # Import GoM fitting results\n#' data(\"MouseDeng2014.FitGoM\")\n#' names(MouseDeng2014.FitGoM)\n#'\n#' compGoM(data = t(deng.counts),\n#'            model_output = MouseDeng2014.FitGoM)\n#' @importFrom slam col_sums row_sums as.simple_triplet_matrix\n#' @export\n\ncompGoM <- function(data, model_output)\n{\n    # Get the numer GoM models\n    num_models <- length(model_output)\n\n    X <- CheckCounts(data+1e-04);\n    p <- ncol(X)\n    n <- nrow(X)\n\n    ## Null model log probability\n    sx <- sum(X)\n    qnull <- slam::col_sums(X)/sx\n    null_loglik <- sum( X$v*log(qnull[X$j]) ) - 0.5*(n+p)*(log(sx) - log(2*pi))\n\n\n    # Compute logLik for each GoM\n    compGoM_models <- sapply(1:num_models, function(i) {\n\n        theta <- model_output[[i]]$theta\n        omega <- model_output[[i]]$omega\n        probs <- omega %*% t(theta)\n\n        if (!all.equal(dim(data), dim(probs))) {\n            stop(\"Observed data dimension does not match \\n\n                 the model fit results dimension\")\n        }\n\n        loglik <- Reduce(sum, sapply(1:NROW(data), function(i) {\n            dmultinom(x = data[i,], prob = probs[i,], log = TRUE)\n        }) )\n        BIC <- -2*loglik + NCOL(theta)*log(NROW(data))\n\n        ll <- list(\"BIC\"=BIC, \"loglik\"=loglik, \"null_loglik\"=null_loglik);\n\n        return(ll)\n    })\n    names(compGoM_models) <- names(model_output)\n\n    return(compGoM_models)\n}\n\nCheckCounts <- function(fcounts){\n    if(class(fcounts)[1] == \"TermDocumentMatrix\"){ fcounts <- t(fcounts) }\n    if(is.null(dimnames(fcounts)[[1]])){ dimnames(fcounts)[[1]] <- paste(\"doc\",1:nrow(fcounts)) }\n    if(is.null(dimnames(fcounts)[[2]])){ dimnames(fcounts)[[2]] <- paste(\"wrd\",1:ncol(fcounts)) }\n    empty <- slam::row_sums(fcounts) == 0\n    if(sum(empty) != 0){\n        fcounts <- fcounts[!empty,]\n        cat(paste(\"Removed\", sum(empty), \"blank documents.\\n\")) }\n    return(slam::as.simple_triplet_matrix(fcounts))\n}\n",
    "created" : 1478396821630.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3690771597",
    "id" : "E87E986B",
    "lastKnownWriteTime" : 1478398427,
    "last_content_update" : 1478398427,
    "path" : "~/Desktop/CountClust/R/compGoM.R",
    "project_path" : "R/compGoM.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}